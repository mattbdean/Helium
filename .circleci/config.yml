version: 2
restore_deps_cache: &restore_deps_cache
    keys:
        - deps-node8-{{ checksum "yarn.lock" }}
jobs:
    cache-preinstalled:
        docker:
            # Prefer CircleCI images because they're preinstalled
            - image: circleci/node:8
        steps:
            - checkout
            # Use cached dependencies if there are any
            - restore_cache:
                <<: *restore_deps_cache
            # If there was no cache install everything
            - run:
                name: Install dependencies
                command: yarn install
            # Save the cache here
            - save_cache:
                key: deps-node8-{{ checksum "yarn.lock" }}
                paths:
                    - "node_modules"
    test-client:
        docker:
            - image: circleci/node:8-browsers
        steps:
            - checkout
            - restore_cache:
                <<: *restore_deps_cache
            - run: yarn gulp common:build
            - run:
                name: Client tests
                command: yarn test:client --progress false
            - run:
                name: Build client in production mode
                command: yarn ng build --prod --progress false
            - persist_to_workspace:
                root: .
                paths:
                    - "coverage"
    test-server:
        docker:
            - image: circleci/node:8
            - image: circleci/mysql:5.7-ram
              environment:
                  - MYSQL_ALLOW_EMPTY_PASSWORD=true
                  - MYSQL_HOST=127.0.0.1
                  - MYSQL_ROOT_HOST=%
                  - MYSQL_USER=root
        steps:
            - checkout
            - restore_cache:
                <<: *restore_deps_cache
            - run: yarn gulp common:build
            - run:
                name: Wait for DB
                command: dockerize -wait tcp://localhost:3306 -timeout 1m
            - run: sudo apt-get install mysql-client
            - run:
                name: Initialize DB
                command: mysql -u root -h 127.0.0.1 < server/test/init.sql
            - run:
                name: Server tests
                command: yarn test:server
            - persist_to_workspace:
                root: .
                paths:
                    - "coverage"
    test-e2e:
        machine: true
        steps:
            - checkout
            - restore_cache:
                <<: *restore_deps_cache
            - run:
                name: Start MySQL via Docker
                command: |
                    docker run -d --name mysql -p 3306:3306 \
                        -e "MYSQL_ALLOW_EMPTY_PASSWORD=true" \
                        -e "MYSQL_HOST=127.0.0.1" \
                        -e "MYSQL_ROOT_HOST=%" \
                        mysql/mysql-server:5.7
            - run:
                name: Build Docker image
                command: docker build -t mattbdean/helium:latest-dev-${CIRCLE_BRANCH} .
            - run: docker run -d --name helium mattbdean/helium:latest-dev-${CIRCLE_BRANCH}
            - run: docker ps
            - run:
                name: Add required APT repositories
                command: |
                    # Yarn
                    curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -
                    echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list

                    # MySQL
                    wget https://dev.mysql.com/get/mysql-apt-config_0.8.9-1_all.deb
                    DEBIAN_FRONTEND=noninteractive sudo dpkg -i mysql-apt-config_0.8.9-1_all.deb

                    sudo apt-get update
            - run:
                name: Install MySQL client and Yarn
                command: |
                    sudo apt-get install mysql-client yarn
            - run: mysql --version
            - run:
                name: Initialize DB
                command: mysql -u root -h 127.0.0.1 < server/test/init.sql
            - run: yarn e2e:prepped
            - run:
                name: Login to DockerHub
                command: docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
#            - run: docker kill $(docker ps -q)
    codecov:
        docker:
            - image: node:8
        steps:
            - checkout
            - restore_cache:
                <<: *restore_deps_cache
            - attach_workspace:
                at: /tmp/workspace
            - run: cp -r /tmp/workspace/coverage ${CIRCLE_WORKING_DIRECTORY}
            # Make sure things are being saved/restore properly
            - run: du -h -d 2 coverage
#            - run:
#                name: Upload code coverage
#                command: yarn codecov --disable=gcov
            - run: echo "TODO" && false


workflows:
    version: 2
    build:
        jobs:
            - cache-preinstalled
            - test-client:
                requires:
                    - cache-preinstalled
            - test-server:
                requires:
                    - cache-preinstalled
            - test-e2e:
                requires:
                    - cache-preinstalled
            - codecov:
                requires:
                    - test-client
                    - test-server
